// Leetcode 2389. Longest Subsequence With Limited Sum

import java.util.*;
class Main {
  public static void main(String[] args) {
    int[] nums = {4, 5, 2, 1};
    int[] queries = {3, 10, 21};
    System.out.println(Arrays.toString(answerQueries(nums, queries)));
  }

  public static int[] answerQueries (int[] nums, int[] queries) {
    /*
    
    Test case:

    nums = {4, 5, 2, 1};
    queries = {3, 10, 21};

    --------

    Summary of question:

    ans[size = queries.length]
    
    find how many subsequence are there such that:
      sum of subsequence <= queries[i]       

    ans.append[valid subsequence.length]    // length of subsequence found above 
    return ans
    
    --------
    
    Idea:

    sort(nums)
    // nums = {1, 2, 4, 5}
    
    build prefix sum in place to save space
    // since we don't need the original "nums" anymore 
    // nums(after making it prefix sum) = {1, 3, 7, 12}   

    for (i = 0; i < queries.length; i++):
      queries[i] = binarySearch(nums, queries[i]) 
    // run binary search method and save answer into the same "queries" variable to save space
    // since no more use of exhausted query element after checking it  

    return queries


    // binary search method 
    binarySearch(int[] nums, int target) // target = queries[i]  (each query is our target in that run):
      left = 0
      right = nums.length - 1

      while (left <= right):
        mid = left + (right - left) / 2

        if (nums[mid] == target):
          return mid + 1      // since we need window size, not index 

        if (nums[mid] > target):
          right = mid - 1 
        else:
          left = mid + 1

      return left
      // insertion index is the index of the first element in the nums array that is greater than or equal to the target

       --------
       --------



       Time = O(n log n)
       Space = O(1)        // no extra space taken 
    
    */

    Arrays.sort(nums);

    for (int i = 1; i < nums.length; i++) {
      // nums[0] remains the same, so we start from i = 1 
      nums[i] += nums[i - 1]; 
    }

    for (int i = 0; i < queries.length; i++) {
      queries[i] = binarySearch(nums, queries[i]);
    }

    return queries;

    
  }

  public static int binarySearch(int[] nums, int target) {    // target= queries[i]
    int left = 0;
    int right = nums.length - 1;

    while (left <= right) {
      int mid = left + (right - left) / 2;

      if (nums[mid] == target) {
        return mid + 1;
      }

      if (nums[mid] > target) {
        right = mid - 1;
      }  else {
        left = mid + 1;
      }
    }

    return left;
  }
}
