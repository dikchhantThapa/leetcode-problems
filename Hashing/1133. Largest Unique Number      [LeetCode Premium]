/*

// Leetcode 1133. Largest Unique Number [LeetCode Premium]

Given an integer array nums, return the largest integer that only occurs once. If no integer occurs once, return -1.

 

Example 1:

Input: nums = [5,7,3,9,4,9,8,3,1]
Output: 8
Explanation: The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer.
Example 2:

Input: nums = [9,9,8,8]
Output: -1
Explanation: There is no number that occurs only once.
 

Constraints:

1 <= nums.length <= 2000
0 <= nums[i] <= 1000

*/

import java.util.*;
class Main {
  public static void main(String[] args) {
    int[] nums = {5, 7, 3, 9, 4, 9, 8, 3, 1};
    System.out.println(largestUniqueNumber(nums));
  }

  public static int largestUniqueNumber(int[] nums) {
    /*

    Idea:
    create HashMap map
    Key = number, Value = total occurences of number
    ans = -1   
    check all values:
      if value == 1:
        currNum = KEY of that value
        ans = max(ans, currNum)

    return ans    

    ---- 
    Time  : O(n)
    Space : O(n)
    
    */

    HashMap<Integer, Integer> map = new HashMap<>();
    int ans = -1;
    
    for (int num : nums) {
      map.put(num, map.getOrDefault(num, 0) + 1);
    }

    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
      if (entry.getValue() == 1) {
        int currNum = entry.getKey();
        ans = Math.max(ans, currNum);
      }
    }
    
    return ans;

    
  }


}
