// Leetcode 1248. Count Number of Nice Subarrays

import java.util.*;

class Main {
  public static void main(String[] args) {
    int[] nums = {1, 1, 2, 1, 1};
    int k = 3;
    System.out.println(numberOfSubarrays(nums, k));
      
  }

  public static int numberOfSubarrays(int[] nums, int k) {
    /**

    **** got the pattern, this problem is somewhat similar to 560. Subarray Sum Equals K *****


    Idea:
    Increment current total as += num % 2 
    (because odd will return 1 and even will return 0)
    if map already has (curr - k), increment ans as its value 
    add the current total into map as key and its no. of occurence as value

    -------------------------
    
    Example:

    [1,1,2,1] and [1,2,1,1]
    
    Odd: 
    odd % 2 = 1
    (1 + 1 + 1) % 2 = 1
    

    Even:
    even % 2 = 0 
    (1 + 1) % 2 = 0 
    



    Initialize 
    ans = 0

    map
    0   1 


    1st iteration: 

        1   1   2   1   1
        ^   
        1 % 2 = 1 
        curr = 1 

        ans += curr - k = 1 - 3 = -2 (not present in map) 
            = 0 

        map
        0   1 
        1   1 


    2nd iteration: 
    
        1   1   2   1   1
        ^   ^
        curr += 1 + (1 % 2)
                = 1 + 1
                = 2

        ans += curr - k = 2 - 3 = -1 (not present in map)
            = 0 

        map 
        0   1   
        1   1
        2   1 

    
    3rd iteration:
    
        1   1   2   1   1
        ^   ^   ^
        curr += 2 + (2 % 2)
                = 2 + 0
                = 2 

        ans += curr - k = 2 - 3 = -1 (not present in map)
            = 0

        map
        0   1
        1   1
        2   2

    
    4th iteration:

        1   1   2   1   1
        ^   ^   ^   ^
        curr += 2 + (1 % 2)
                = 2 + 1
                = 3 

        ans += curr - k = 3 - 3 = 0 (present in map)     
            = ans + (value of found number)   
            = 0 + 1
            = 1 

        map
        0   1
        1   1
        2   2
        3   1


    5th iteration:

        1   1   2   1   1
        ^   ^   ^   ^   ^
        curr += num % 2 
        curr += 3 + (1 % 2)
                = 3 + 1
                = 4
        
        ans += curr - k = 4 - 3 = 1 (present in map)
            = ans + (value of found number)
            = 1 + 1
            = 2     // answer 

        map
        0   1
        1   1
        2   2
        3   1
        4   1 

    DONE, final ans = 2 


    -------------------------

    Pseudocode:

    nums = {...}

    create Map map 
    map.put(0, 1)

    ans = 0
    curr = 0

    for (num : nums):
        curr += num % 2     
        ans += map[curr - k], or += 0 
        map[curr] += 1            
        
    return ans

    
    -------------------------

    Time = O(n)
    Space = O(n)


     */
    
    HashMap<Integer, Integer> map = new HashMap<>();
    map.put(0, 1);

    int ans = 0;
    int curr = 0;

    for (int num : nums) {
        curr += num % 2;
        ans += map.getOrDefault(curr - k, 0);
        map.put(curr, map.getOrDefault(curr, 0) + 1);
    }
    return ans;


    
}
}
