// Leetcode 560. Subarray Sum Equals K

class Solution {
    public int subarraySum(int[] nums, int k) {

        /**
        
        Example:
        
        nums = {1, -1, 1, 1, 1, 1}
            
            1   -1    1    1   1    1            k = 3 
            ^

            answers = 
            1   -1    1    1   1    1           
            ^    ^    ^    ^   ^           total = 3
         

            1   -1    1    1   1    1           
                 ^    ^    ^   ^    ^      total = 3


            1   -1    1    1   1    1           
                      ^    ^    ^         total = 3


            1   -1    1    1   1    1           
                           ^    ^    ^     total = 3

            
            4 occurences of k = 3, 
            so ans = 4



        Idea: 

            nums =      1   -1    1    1   1    1

            take prefix sum:  
            prefix =    1    0    1    2   3    4



            since we need k = 3 as value, 
            
            if (currSum - difference == k):         // means it's True if we get k (3 in our example) as the window 
                this will count 
                
            k = currSum - diff
            diff = currSum - k 


            ---- 
            Steps:
            
            create Map
            put each prefix sum as Key, value will be total occurences of it
            if currSum - k  is present as the Key, add its key count AND add its value to the count(answer count variable) 


            total amount in the count(answer count) variable is the answer

            NOTE:
            since we will be subtracting k to find windows, we need to first initialize our map as
            key value
            0   1

            because if we don't do this there won't be any subarray to subtract for the first value 
            (we need this to not run into a wrong answer)

            =====
            Example of diff = currSum - k:

                prefix =    1    0    1    2   3    4

                map 
                key value
                0    2      // initial 0 and prefix 0 we get from index 1 
                1    2
                2    1
                3    1
                4    1 

            when we reach prefix 3, 
                currSum - k = 3 - 3 = 0 (0 is present in our map with value 2 so 2 gets incremented to the answer): answer = 2

                currSum - k = 4- 3 = 1 (1 is present in our map with value 2 so 2 gets incremented to the answer) : answer = 2 + 2 = 4
            
        
         */

        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);

        int ans = 0;
        int currSum = 0;

        for (int num : nums) {
            currSum += num;
            int diff = currSum - k;

            ans += map.getOrDefault(diff, 0);
            // if diff present, add its Value to ans, otherwise no need to add 
            map.put(currSum, map.getOrDefault(currSum, 0) + 1);
            // update HashMap

        }
        
        return ans;

    }
}
