/*
Leetcode 2270. Number of Ways to Split Array

Given an integer array nums, find the number of ways to split the array into two parts
so that the first section has a sum greater than or equal to the sum of the second section. 
The second section should have at least one number.

*/

class Main {
  public static void main(String[] args) {
    int[] nums = {10, 4, -8, 7};
    System.out.println(waysToSplitArray(nums));
  }

  // this is the more optimal solution with O(n) time and O(1) space complexity
  public static int waysToSplitArray(int[] nums) {
    int ans = 0;
    int leftSection = 0; 
    long total = 0;

    for (int num : nums) {
      total += num;
    }

    /* only till nums.length - 1 because 
       it's given that the right section can't be empty */
    for (int i = 0; i < nums.length - 1; i++) {
      leftSection += nums[i];
      long rightSection = total - leftSection;
      if (leftSection >= rightSection) {
        ans++;
      }
    }
    return ans;
  }
}
