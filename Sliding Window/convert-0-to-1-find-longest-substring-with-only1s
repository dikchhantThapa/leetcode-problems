/*
You are given a binary string s (a string containing only "0" and "1"). You may choose up to one "0" and 
flip it to a "1". What is the length of the longest substring achievable that contains only "1"?

For example, given s = "1101100111", the answer is 5. If you perform the flip at index 2, the string becomes 1111100111.

*/
class Main {
  public static void main(String[] args) {
    String s = "1101100111";
    System.out.println(findLength(s));
  }

  public static int findLength (String s) {
    /*
    1 1 0 1 1 0 0 1 1 1
    ^ ^ ^ ^ ^ 
          ^ ^ ^
                ^ ^ ^ ^      

    left = 0
    countZero = 0
    ans = 0 

    for (right = 0; right < s.length; right++):
      if s[right] == 0:
        countZero++ 

      while (countZero > 1):
        if s[left] == '0':
          countZero-- 
        left++  
        
      ans = max(ans, right - left + 1)   

    return ans 
    
    */

    int left = 0;
    int zeroCount = 0;
    int ans = 0;

    for (int right = 0; right < s.length(); right++) {
      if (s.charAt(right) == '0') {
        zeroCount++;
      }

      while (zeroCount > 1) {
        if (s.charAt(left) == '0') {
          zeroCount--;
        }
        left++;
      }

      // find previous window bigger or current 
      ans = Math.max(ans, right - left + 1);
      
    }
    return ans;
    
    
  }
}
