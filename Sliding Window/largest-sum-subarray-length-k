/*
Given an integer array nums and an integer k, find the sum of the subarray with the largest sum whose length is k.

Example: If an array nums = [3, -1, 4, 12, -8, 5, 6] and k = 4 is given, the answer will be 18 because the window with size 4 with the largest sum is [3, -1, 3, 12] which has a sum 18. 

*/

class Main {
  public static void main(String[] args) {
    int[] nums = {3, -1, 4, 12, -8, 5, 6};
    int k = 4;    // window size = 4 
    System.out.println(findBestSubarray(nums, k));
  }

  public static int findBestSubarray(int[] nums, int k) {
    /*
    3  -1  4  12  -8  5  6       k = 4   (window size 4)
    ^   ^  ^   ^           
        ^  ^   ^   ^        // removing prev elem, adding next elem
           ^   ^   ^  ^
               ^   ^   ^  ^
    curr = 0
    for (i = 0; i < k; i++):    // find total from first 4 numbers (first k numbers sum)
      curr += nums[i]     // add all numbers from 0 to k (3 to 12 in our ex.)
    // curr = 18 in our example (total of first 4 numbers)

    int ans = curr        // ans = 18 in first iteration 
    for (i = k; k < nums.length; i++):
      curr += nums[i] - nums[i - k]    // add next number, remove 1st number
      ans = max(ans, curr)    // set ans to previous or current sum(who is bigger)

    return ans
    
    */

    int curr = 0;
    for (int i = 0; i < k; i++) {
      curr += nums[i];
    }

    int ans = curr;  
    for (int i = k; i < nums.length; i++) {
      curr += nums[i] - nums[i - k];
      ans = Math.max(ans, curr);
    }
    return ans;
  }
}
