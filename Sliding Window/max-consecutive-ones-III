/*
Leetcode 1004. Max Consecutive Ones III

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
                        ^         ^
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

*/
class Main {
  public static void main(String[] args) {
    int[] nums = {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0};
    int k = 2;
    System.out.println(longestOnes(nums, k));
  }
  
  public static int longestOnes(int[] nums, int k) {
    /*
    1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0
    -------------

    left = 0
    countZero = 0
    ans = 0

    for (right = 0; right < nums.length; i++):
      if nums[right] == 0:
        countZero++ 

      while (countZero > k):      // if total zeroes are more than k
        if nums[left] == 0:       
          countZero--             // if left number is 0, reduce a 0 count  
        left++                    // move the left pointer to left by 1 
  
      ans = max (ans, right - left + 1)    

    return ans
    
    */

    int left = 0;
    int countZero = 0;
    int ans = 0;

    for (int right = 0; right < nums.length; right++) {
      if (nums[right] == 0) {
        countZero++;
      }

      while (countZero > k) {
        if (nums[left] == 0) {
          countZero--;
        }
        left++;
      }
      ans = Math.max(ans, right - left + 1);
      
    }

    return ans;
  }
}
