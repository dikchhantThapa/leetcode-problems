/*
Leetcode 713. Subarray Product Less Than K.

Given an array of positive integers nums and an integer k, return the number of subarrays where the product of all the elements in the subarray is strictly less than k.

For example, given the input nums = [10, 5, 2, 6], k = 100, the answer is 8. The subarrays with products less than k are:

[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]


*/
class Main {
  public static void main(String[] args) {
    int[] nums = {10, 5, 2, 6};
    int k = 100;
    System.out.println(numSubarrayProductLessThanK(nums, k));
  }

  public static int numSubarrayProductLessThanK(int[] nums, int k) {
    if (k <= 0) {
      return 0;
    }

    int ans = 0;
    int prod = 1;   // product
    
    int left = 0;
    int right = 0;

    while (right <  nums.length) {
      prod = prod * nums[right];

      while (prod >= k) {
        prod = prod / nums[left];
        left++;
        /*
         10, 5, 2, 6    k = 100 (we need prod less than 100)
             ^  ^
        */
      }
      ans += right - left + 1;  
      /*
      (Why are we calculating and adding the LENGTH to find the answer)
      The TRICK here is: 
      every time you add a new element to the subarray --> the number of subarray possible increase by the "length of the new subarray", hence the count += length of subarr
      (so we count the length of the subarray and it's the same)
      10      = 1 element
      10, 5   = 2 element
      5, 2    = 2 element
      5, 2, 6 = 3 element
      
      
      */
      right++;
    }

    return ans;

  }
}
