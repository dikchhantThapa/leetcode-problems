/*
Leetcode 977. Squares of a Sorted Array

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
*/

import java.util.*;

class Main {
  public static void main(String[] args) {
    int[] nums = {-4, -1, 0, 3, 10};
    int[] ans = sortedSquares(nums);
    System.out.println(Arrays.toString(ans));
  }

  public static int[] sortedSquares(int[] nums) {
    /*
    // -4, -1, 0, 3, 10
    Method 1: 
    O(n log n)
    i = 0

    while (i < nums.length):
      nums[i] = nums[i] * nums[i]
      i++
    sort(nums)
    return nums
    --------
    --------
    
    Method 2:
    O(n)

    [-4,-1,0,3,10]

    ans = [ ]
    
    left = 0
    right = nums.length - 1

    for (int i = ans.length - 1; i >= 0; i--):
    // check which absolute value is greater, then square it and add it to our result array
    // keep moving our 2 pointers(left to right and right to left) until they meet
      if (abs(nums[right]) > abs(nums[left]):    
        ans[i] = nums[right] * nums[right]
        right--
      else:
        ans[i] = nums[left] * nums[left]
        left++

    return ans
    
    */

    int[] ans = new int[nums.length];  // same size array
    int left = 0;
    int right = nums.length - 1;

    for (int i = ans.length - 1; i >= 0; i--) {
      if(Math.abs(nums[right]) > Math.abs(nums[left])) {
        ans[i] = nums[right] * nums[right];
        right--;
      }  else {
        ans[i] = nums[left] * nums[left];
        left++;
      }
    }

    return ans;     
  }
}
