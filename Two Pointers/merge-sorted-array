/*
Leetcode 88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.




 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.



*/

import java.util.*;

class Main {
  public static void main(String[] args) {
    /*
    nums1 = [1,2,3,0,0,0]
                 ^ start here and go left 
                  
    nums2 = [2,5,6]
                 ^ start here and go left 
    

    nums1 = [1, 2, 2, 3, 5, 6]
                            ^ add from the highest on the right and go left 


    //
    last = m + n - 1     // current last index of nums1
    
    while (m > 0 && n > 0):
      if (nums1[m - 1] > nums2[n - 1]):
        nums1[last] = nums1[m - 1]
        m--
      else 
        nums1[last] = nums2[n - 1]
        n--
      last--      // we need to decrement this regardless 


    // filling up the remaining elements of nums2 into nums1
    while n > 0:    // if there's still some left
      nums1[last] = nums2[n]
      n--
      last--
          
    */

    // int[] nums1 = {1, 2, 3, 0, 0, 0};
    // int[] nums2 = {2, 5, 6};
    int[] nums1 = {3, 3, 4, 0, 0, 0};
    int[] nums2 = {1, 7, 8};
    int m = 3;
    int n = 3;

    // System.out.println(merge(nums1, nums2, m, n));
    System.out.println(Arrays.toString(merge(nums1, nums2, m, n)));
    
  }

  public static int[] merge(int[] nums1, int[] nums2, int m, int n) {

    int last = m + n - 1;      // here, it's index number 5 is the last index

    while (m > 0 && n > 0) {
      if (nums1[m - 1] > nums2[n - 1]) {
        nums1[last] = nums1[m - 1];    // if index at nums1[m] is greater
        m--;
      }  else {
        nums1[last] = nums2[n - 1];    // if index at nums2[n] is greater
        n--;
      }
      last--;
    }

    while (n > 0) {
      nums1[last] = nums2[n - 1];
      last--;
      n--;
    }
    return nums1;
        
  }
  
}
